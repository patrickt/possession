- Roguelike
- Copying ToME 2's "Lost Soul Deathmold" run
  - You can't move directly, you can only teleport
  - Accurately (to a new level), or inaccurately (to a nearby space)
  - Gameplay loop involves room-jumping until you find something that can help you
  - Or an enemy you can kill for XP, and then possess

We can't blit vty images directly, there's no superimpose operation
I don't want to write the various gyrations required to figure that out
So we could make an Array of Vty images, and each Located thing writes
into the array. We can do that iteratively or foldmapily. Then we can
build scanlines with horizJoin and join the scanlines with vertJoin.

Monster locations:
- from [[https://github.com/sil-quirk/sil-q/blob/master/lib/edit/monster.txt][silq]]
- from [[https://nikheizen.github.io/pages/compostband/mon-desc.html][poschengband]]

multi-square things? z-levels in the canvas? gonna need them
Fade out modeline message
Confusing method dispatch (got a little better)
Alert when a level is gained (need to figure out where this logic lives)
third dimension
switch to Grid instead of array

customizable key layouts
what is a layout? it describes how components interpret keystrokes
contained in UI.State, a SomeLayout, parsed from a Dhall string in
class Layout map widget where
  translate :: map -> widget -> Vty.Event -> Input

another approach would be to define them in Dhall


use Shake?

UI.Widgets.Modeline: learn how viewports work

figure out solution for caching things like position-entity maps

remove upon from Responder and use arrow notation instead

implementing Dirty was a bad idea

* Caching

everything that could possibly be useful should be in a Context. this can be stored in the toplevel state and updated differentially when new info comes in.

Fix magical +1 in Hud Responder impl
